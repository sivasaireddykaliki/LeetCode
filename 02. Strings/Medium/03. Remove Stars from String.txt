2390. Removing Stars From a String
Solved
Medium
Topics
Companies
Hint
You are given a string s, which contains stars *.

In one operation, you can:

Choose a star in s.
Remove the closest non-star character to its left, as well as remove the star itself.
Return the string after all stars have been removed.

Note:

The input will be generated such that the operation is always possible.
It can be shown that the resulting string will always be unique.
 

Example 1:

Input: s = "leet**cod*e"
Output: "lecoe"
Explanation: Performing the removals from left to right:
- The closest character to the 1st star is 't' in "leet**cod*e". s becomes "lee*cod*e".
- The closest character to the 2nd star is 'e' in "lee*cod*e". s becomes "lecod*e".
- The closest character to the 3rd star is 'd' in "lecod*e". s becomes "lecoe".
There are no more stars, so we return "lecoe".
Example 2:

Input: s = "erase*****"
Output: ""
Explanation: The entire string is removed, so we return an empty string.
 

Constraints:

1 <= s.length <= 105
s consists of lowercase English letters and stars *.
The operation above can be performed on s.
Seen this question in a real interview before?
1/4
Yes
No
Accepted
228.8K
Submissions
308.7K
Acceptance Rate
74.1%


Solution:

class Solution {
    public String removeStars(String s) {
        
        // USE STACK DATA STRUCTURE
        // push the characters except *
        // when we read *, pop the top element
        Stack<Character> stack=new Stack<Character>();
        String stackString="";
        String result="";

        for(int i=0;i<s.length();i++)
        {
            if(s.charAt(i)=='*')
            {
                stack.pop();
            }
            else
            {
                stack.push(s.charAt(i));
            }
        }

        // using iterator to iterate elements
        Iterator iterator = stack.iterator();

        while(iterator.hasNext())
        {
            result+=(Character)iterator.next();
        }

        /*

        // read all elements from stack and add to string  till it becomes empty
        while( !(stack.empty()) )
        {
            stackString+=stack.pop();
        }

        for(int i=stackString.length()-1;i>=0;i--)
        {
            result+=stackString.charAt(i);
        }
        */ 
        return result;
    }
}