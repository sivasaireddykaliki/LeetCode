1572. Matrix Diagonal Sum
Easy
3.3K
46
Companies
Given a square matrix mat, return the sum of the matrix diagonals.

Only include the sum of all the elements on the primary diagonal and all the elements on the secondary diagonal that are not part of the primary diagonal.

 

Example 1:


Input: mat = [[1,2,3],
              [4,5,6],
              [7,8,9]]
Output: 25
Explanation: Diagonals sum: 1 + 5 + 9 + 3 + 7 = 25
Notice that element mat[1][1] = 5 is counted only once.
Example 2:

Input: mat = [[1,1,1,1],
              [1,1,1,1],
              [1,1,1,1],
              [1,1,1,1]]
Output: 8
Example 3:

Input: mat = [[5]]
Output: 5
 

Constraints:

n == mat.length == mat[i].length
1 <= n <= 100
1 <= mat[i][j] <= 100


Solution:

class Solution {
    public int diagonalSum(int[][] mat) {
        int sum=0; // i -> 1D array pointer, j-> value pointer inside 1-D array
        /*
        for(int i=0;i<mat.length;i++)
        {
            for(int j=0;j<mat[i].length;j++)
            {
                if(i==j)
                {
                    sum+=mat[i][j];
                }
            }
        } */
        if(mat.length==1)
        {
            return mat[0][0];
        }
        else
        {
            int i=0;
            int j=0;
            // primary diagnoal sum
            while(i<mat.length && j<mat.length)
            {
                sum+=mat[i][j];
                i++;
                j++;
            }
            i=0;
            j=mat.length-1;
            // secondary diagonal sum
            while(i<=mat.length && j>=0)
            {
                sum+=mat[i][j];
                i++;
                j--;
            }

            if(mat.length%2==0)
                return sum;
            else // odd length matrix remove redundant mid element value
                return sum-mat[mat.length/2][mat.length/2]; 
        }
        
    }
}