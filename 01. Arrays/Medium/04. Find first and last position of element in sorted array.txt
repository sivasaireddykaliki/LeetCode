
Code
Testcase
Test Result
Test Result
34. Find First and Last Position of Element in Sorted Array
Solved
Medium
Topics
Companies
Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]
Example 3:

Input: nums = [], target = 0
Output: [-1,-1]
 

Constraints:

0 <= nums.length <= 105
-109 <= nums[i] <= 109
nums is a non-decreasing array.
-109 <= target <= 109


Solution:

class Solution {
    public int[] searchRange(int[] nums, int target) {

        // implement binary search
        int start=0;
        int end=nums.length - 1;
        //System.out.println("Array length: "+nums.length);
        //System.out.println("end: "+end);
        int[] result=new int[2];
        int index=0;
        int mid=(start+end)/2;
        //System.out.println("mid "+mid);
        while(start<=end)
        {
           // System.out.println(start+" start index and end index  "+end);

            if(target<nums[mid])
            {
                end=mid-1;
                mid=(start+end)/2;
            }
            else if(target>nums[mid])
            {
                start=mid+1;
                mid=(start+end)/2;
            }
            else // here match is found at mid index
            {
               // System.out.print("Match found"); // start,mid and end will be adjacent or
               start=mid;
               end=mid;
               while(start>0)
                {
                  start--;
                 if(target != nums[start])
                 {
                      start=start+1;
                      break;
                 }
                }

                while(end<nums.length-1)
                {
                 end++;
                 if(target != nums[end])
                 {
                     end=end-1;
                     break;
                 }
                }
                result[0]=start;
                result[1]=end;
                break;
            }
        }

        // element not found
        if(start>end)
        {
            result[0]=-1;
            result[1]=-1;
        }
        return result;
    }
}
