238. Product of Array Except Self
Solved
Medium
Topics
Companies
Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].

The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.

You must write an algorithm that runs in O(n) time and without using the division operation.

 

Example 1:

Input: nums = [1,2,3,4]
Output: [24,12,8,6]
Example 2:

Input: nums = [-1,1,0,-3,3]
Output: [0,0,9,0,0]
 

Constraints:

2 <= nums.length <= 105
-30 <= nums[i] <= 30
The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.
 

Follow up: Can you solve the problem in O(1) extra space complexity? (The output array does not count as extra space for space complexity analysis.)




Solution:

/*
    Prefix Product = Product of elements before current value;
    Suffix Product = Product of elements after current value;
    Result value for each index = Prefix Product* Suffix Product;
    initially we calculate prefix product for all index
    then we use suffix product to update all elements in result array
*/

class Solution {
    public int[] productExceptSelf(int[] nums) {
        
        int[] result = new int[nums.length];
        // for 1st value in index, prefix product is 1.
        result[0]=1;
        // update result array with prefix product values
        for(int i=1;i<nums.length;i++)
        {
            result[i]=result[i-1]*nums[i-1]; // nums[i-1] points to  previous element
        }
        // to update suffix products in array we iterate backwards
        //for last value in array suffix product is 1.
        // update result values and suffix product values parallely
        int suffixValue=1;
        for(int i=nums.length-1;i>=0;i--)
        {
            result[i]=result[i]*suffixValue;
            suffixValue*=nums[i];
        }
        return result;
    }
}